import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class ExternalLinkServiceTest {

    @Mock
    private RestTemplateHelper<ExternalLinkResponse> restTemplateHelper;

    @Mock
    private ObjectMapperHelper mapperHelper;

    @InjectMocks
    private ExternalLinkService externalLinkService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testExternalLinks_PositiveScenario() throws RequestProcessingException {
        // Mock data
        ExternalLinkRequest externalLinkRequest = new ExternalLinkRequest();
        Map<String, String> headers = new HashMap<>();

        // Mock service URL
        String serviceUrl = "http://example.com";
        when(restTemplateHelper.serviceUrl(anyString())).thenReturn(serviceUrl);

        // Mock replaceSqlName method
        when(restTemplateHelper.replaceSqlName(anyString(), anyString())).thenReturn("/test");

        // Mock external link response
        List<ExternalLinkResult> dbResponseData1 = new ArrayList<>();
        List<ExternalLinkResult> dbResponseData2 = new ArrayList<>();
        ExternalLinks expected = new ExternalLinks();
        when(restTemplateHelper.get(anyString(), any(), anyMap())).thenReturn(dbResponseData1);
        when(restTemplateHelper.get(anyString(), any(), anyMap())).thenReturn(dbResponseData2);

        // Test method
        ExternalLinks result = externalLinkService.externalLinks(externalLinkRequest, headers);

        // Assertions
        assertNotNull(result);
        // Add more assertions as needed
    }

    @Test
    public void testExternalLinks_ExceptionScenario() {
        // Mock data
        ExternalLinkRequest externalLinkRequest = new ExternalLinkRequest();
        Map<String, String> headers = new HashMap<>();

        // Mock service URL
        when(restTemplateHelper.serviceUrl(anyString())).thenThrow(new RuntimeException("Service unavailable"));

        // Test method and assertions
        assertThrows(RequestProcessingException.class, () -> {
            externalLinkService.externalLinks(externalLinkRequest, headers);
        });
    }

    // Add more test cases for other scenarios as needed
}
