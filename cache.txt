import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class HashUtil {

    public static String sha256(String base) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(base.getBytes(StandardCharsets.UTF_8));
            StringBuilder hexString = new StringBuilder(2 * hash.length);
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
}




import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Map;

public class CacheKeyGenerator {

    public static String generateKey(String baseUrl, String id, Map<String, String> queryParams, String requestBody, String method) {
        StringBuilder keyBuilder = new StringBuilder(baseUrl)
            .append(id != null ? id : "");

        if (queryParams != null && !queryParams.isEmpty()) {
            queryParams.entrySet().stream()
                .sorted(Map.Entry.comparingByKey())
                .forEach(entry -> keyBuilder.append(entry.getKey()).append(entry.getValue()));
        }

        if ("POST".equalsIgnoreCase(method) && requestBody != null) {
            keyBuilder.append(requestBody);
        }

        return keyBuilder.toString();
    }

    public static String sha256(String rawKey) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] encodedHash = digest.digest(rawKey.getBytes(StandardCharsets.UTF_8));
            StringBuilder hexString = new StringBuilder();
            for (byte b : encodedHash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("No such algorithm exception", e);
        }
    }
}


import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class HashGenerator {

    public static String generateHashKey(String url, String requestBody) {
        // Concatenate URL and request body
        String input = url + requestBody;

        // Generate SHA-256 hash
        return hashWithSHA256(input);
    }

    private static String hashWithSHA256(String input) {
        try {
            // Get a SHA-256 MessageDigest instance
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            
            // Perform the hash computation
            byte[] hashBytes = digest.digest(input.getBytes(StandardCharsets.UTF_8));

            // Convert the byte array to a hex string
            StringBuilder hexString = new StringBuilder(2 * hashBytes.length);
            for (byte b : hashBytes) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }

            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("Error generating hash key", e);
        }
    }

    public static void main(String[] args) {
        String url = "https://api.example.com/endpoint";
        String requestBody = "{\"key\":\"value\"}";

        String hashKey = generateHashKey(url, requestBody);
        System.out.println("Generated Hash Key: " + hashKey);
    }
}
